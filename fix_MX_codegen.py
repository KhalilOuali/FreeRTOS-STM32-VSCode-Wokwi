# This script is used to fix the code generated by STM32CubeMX
# Search for `# fix_MX_codegen.py` in the workspace to see the changes made by this script

def fix_source():
    """
    STM32CubeMX adds `../` at the beginning of the path to `stm32c0xx_nucleo.c` file in Makefile.
    This function removes that.
    """
    with open("Makefile", "r") as file:
        lines = file.readlines()

    start_line = next(i for i, line in enumerate(lines) if "C_SOURCES =  \\" in line) + 1

    end_line = next(i for i, line in enumerate(lines[start_line:]) if line.strip() == "") + start_line - 1

    source_lines = [line for line in lines[start_line:end_line+1] if "stm32c0xx_nucleo.c" not in line]

    if not source_lines[-1].strip().endswith("\\"):
        source_lines[-1] = source_lines[-1].strip() + " \\\n"

    with open("Makefile", "w") as file:
        file.writelines(lines[:start_line] + source_lines + ["Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c \t# fix_MX_codegen.py\n"] + lines[end_line+1:])

def add_write_override():
    """
    It's possible to redirect printf output to COM port by overriding std functions.
    STM32CubeMX only overrides `__io_putchar` for `__GNUC__`, which is not enough on some systems.
    This function adds a `_write` override to `Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c` file.
    """
    addition = """
    // fix_MX_codegen.py

    #ifdef __GNUC__
    /**
    * @brief  Redirect printf output to COM
    */
    int _write(int file, char *ptr, int len)
    {
        HAL_UART_Transmit(&hcom_uart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
        return len;
    }
    #endif /* __GNUC__ */
    """

    add = True

    with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c', 'r') as file:
        if "_write" in file.read():
            add = False

    if add:
        with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c', 'a') as file:
            file.write(addition)

def fix_usart2():
    """
    VCOM is connected to USART2. STM32CubeMX thinks it's connected to USART1. This function fixes that.
    Replaces the USART number and parameters in `stm32c0xx_nucleo.h` and `.c` files.
    """
    with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.h', 'r') as file:
        lines = file.readlines()

    with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.h', 'w') as file:
        for line in lines:
            content_old_new = {
                ("#define COM1_TX_PIN", "GPIO_PIN_6", "GPIO_PIN_2"),
                ("#define COM1_RX_PIN", "GPIO_PIN_7", "GPIO_PIN_3"),
                ("#define COM1_", "GPIOB", "GPIOA"),
                ("#define COM_POLL_TIMEOUT ", "1000", "HAL_MAX_DELAY"),
                ("USART1", "USART1", "USART2")
            }
            for content, old, new in content_old_new:
                if content in line:
                    line = line.replace(old, new)
                    if "fix_MX_codegen.py" not in line:
                        line = line.strip() + "\t// fix_MX_codegen.py\n"
            file.write(line)

    with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c', 'r') as file:
        lines = file.readlines()

    with open('Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.c', 'w') as file:
        for line in lines:
            if "USART1" in line:
                file.write(line.replace('USART1', 'USART2').strip() + "\t// fix_MX_codegen.py\n")
            else:
                file.write(line)


def main():
    fix_source()
    add_write_override()
    fix_usart2()

if __name__ == "__main__":
    main()
